{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/path.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/flags.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/notification.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/localize.ts","webpack:///./src/apps/lores.ts","webpack:///./src/sheet.ts","webpack:///../../../../foundryVTT-projects/@utils/string.ts","webpack:///./src/main.ts"],"sourcesContent":["export let MODULE_ID = ''\r\nexport let TYPE = 'module'\r\n\r\nexport function setModuleID(id: string, isSystem = false) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n    TYPE = isSystem ? 'system' : 'module'\r\n}\r\n","import { MODULE_ID, TYPE } from '@utils/module'\r\n\r\nexport function getSettingLocalizationPath(...path: string[]) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function flagsUpdatePath(...path: string[]) {\r\n    return `flags.${MODULE_ID}.${path.join('/')}`\r\n}\r\n\r\nexport function templatePath(...path: string[]) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `${TYPE}s/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function imagePath(...path: string[]) {\r\n    return `${TYPE}s/${MODULE_ID}/images/${path.join('/')}`\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function hasModuleFlag(doc: FoundryDocument) {\r\n    return getProperty(doc, `flags.${MODULE_ID}`) !== undefined\r\n}\r\n\r\nexport function flagPath(key: string) {\r\n    return `flags.${MODULE_ID}.key`\r\n}\r\n\r\nexport function getFlag<T extends unknown>(doc: FoundryDocument, key: string): T | undefined\r\nexport function getFlag<T extends unknown>(doc: FoundryDocument, key: string, fallback: T): T\r\nexport function getFlag<T extends unknown>(doc: FoundryDocument, key: string, fallback?: T): T | undefined {\r\n    return (doc.getFlag(MODULE_ID, key) as T | undefined) ?? fallback\r\n}\r\n\r\n/**\r\n * @template {foundry.Document} T\r\n * @param {T} doc\r\n * @param {string} key\r\n * @param {any} value\r\n * @returns T\r\n */\r\nexport function setFlag(doc: FoundryDocument, key: string, value: unknown) {\r\n    return doc.setFlag(MODULE_ID, key, value)\r\n}\r\n\r\nexport function getSourceId(doc: ClientDocumentMixin) {\r\n    return doc.getFlag<ItemUUID>('core', 'sourceId')\r\n}\r\n\r\nexport function hasSourceId(doc: ClientDocumentMixin, sourceId: DocumentUUID) {\r\n    return getSourceId(doc) === sourceId\r\n}\r\n\r\nexport function includesSourceId(doc: ClientDocumentMixin, list: DocumentUUID[]) {\r\n    const sourceId = getSourceId(doc)\r\n    return sourceId ? list.includes(sourceId) : false\r\n}\r\n","import { localize } from '@utils/foundry/localize'\r\n\r\nexport type NotifyArgs = [str: string, arg1?: boolean | Record<string, string | number | boolean>, arg2?: boolean]\r\n\r\nfunction notify(\r\n    str: string,\r\n    arg1?: 'warning' | 'info' | 'error' | boolean | Record<string, string | number | boolean>,\r\n    arg2?: boolean | Record<string, string | number | boolean>,\r\n    arg3?: boolean\r\n) {\r\n    const type = typeof arg1 === 'string' ? arg1 : 'info'\r\n    const data = typeof arg1 === 'object' ? arg1 : typeof arg2 === 'object' ? arg2 : undefined\r\n    const permanent = typeof arg1 === 'boolean' ? arg1 : typeof arg2 === 'boolean' ? arg2 : arg3 ?? false\r\n\r\n    ui.notifications.notify(localize(str, data), type, { permanent })\r\n}\r\n\r\nexport function warn(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'warning', arg1, arg2)\r\n}\r\n\r\nexport function info(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'info', arg1, arg2)\r\n}\r\n\r\nexport function error(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'error', arg1, arg2)\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { warn, NotifyArgs, info, error } from '@utils/foundry/notification'\r\n\r\nexport type LocalizeArgs = [key: string, data?: Record<string, string | number | boolean>]\r\n\r\nexport function localize(...args: LocalizeArgs) {\r\n    let [key, data] = args\r\n    key = `${MODULE_ID}.${key}`\r\n    if (data) return game.i18n.format(key, data)\r\n    return game.i18n.localize(key)\r\n}\r\n\r\nexport function hasLocalization(key: string) {\r\n    return game.i18n.has(`${MODULE_ID}.${key}`, false)\r\n}\r\n\r\nexport function localizePath(key: string) {\r\n    return `${MODULE_ID}.${key}`\r\n}\r\n\r\nexport function localizeTemplate(key: string, { hash }: { hash: Record<string, string> }) {\r\n    return localize(`${key}`, hash)\r\n}\r\n\r\nexport function subLocalize(subKey: string) {\r\n    const fn = (...args: LocalizeArgs) => localize(`${subKey}.${args[0]}`, args[1])\r\n\r\n    Object.defineProperties(fn, {\r\n        warn: {\r\n            value: (...args: NotifyArgs) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        info: {\r\n            value: (...args: NotifyArgs) => info(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        error: {\r\n            value: (...args: NotifyArgs) => error(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        has: {\r\n            value: (key: string) => hasLocalization(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        path: {\r\n            value: (key: string) => localizePath(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        template: {\r\n            value: (key: string, { hash }: { hash: Record<string, string> }) => fn(key, hash),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n    })\r\n\r\n    return fn as ((...args: LocalizeArgs) => string) & {\r\n        warn: (...args: NotifyArgs) => void\r\n        info: (...args: NotifyArgs) => void\r\n        error: (...args: NotifyArgs) => void\r\n        has: (key: string) => boolean\r\n        path: (key: string) => string\r\n        template: (key: string, options: { hash: Record<string, string> }) => string\r\n    }\r\n}\r\n","import { templatePath } from '@utils/foundry/path'\r\nimport { getFlag, setFlag } from '@utils/foundry/flags'\r\nimport { subLocalize } from '@utils/foundry/localize'\r\n\r\nexport class EditLores extends FormApplication<NPCPF2e> {\r\n    constructor(actor: NPCPF2e, options: Partial<FormApplicationOptions> = {}) {\r\n        const id = `npc-edit-lores-${actor.id}`\r\n        super(actor, { ...options, id })\r\n    }\r\n\r\n    static get defaultOptions(): FormApplicationOptions {\r\n        return mergeObject(super.defaultOptions, {\r\n            title: 'Edit Lores',\r\n            template: templatePath('edit-lores.hbs'),\r\n            width: 400,\r\n        })\r\n    }\r\n\r\n    getData(options?: Partial<FormApplicationOptions> | undefined) {\r\n        const actor = this.object\r\n\r\n        return mergeObject(super.getData(options), {\r\n            unspecified: getFlag(actor, 'unspecified') ?? '',\r\n            specific: getFlag(actor, 'specific') ?? '',\r\n            i18n: subLocalize('templates.editLore'),\r\n        })\r\n    }\r\n\r\n    async _updateObject(event: Event, { unspecified, specific }: { unspecified: string; specific: string }) {\r\n        const actor = this.object\r\n        setFlag(actor, 'unspecified', unspecified.trim())\r\n        setFlag(actor, 'specific', specific.trim())\r\n    }\r\n\r\n    activateListeners(html: JQuery) {\r\n        html.find('button.cancel').on('click', this.#onCancel.bind(this))\r\n    }\r\n\r\n    #onCancel(event: JQuery.ClickEvent) {\r\n        event.preventDefault()\r\n        this.close()\r\n    }\r\n}\r\n","import { EditLores } from '@apps/lores'\r\nimport { getFlag } from '@utils/foundry/flags'\r\nimport { capitalize } from '@utils/string'\r\n\r\nexport function renderNPCSheetPF2e(sheet: NPCSheetPF2e, $html: JQuery) {\r\n    const actor = sheet.actor\r\n\r\n    replaceLores(actor, $html)\r\n    addEditButton($html)\r\n    addEvents(actor, $html)\r\n}\r\n\r\nfunction knowledgeSelector(html: JQuery, section: 'header' | 'body', selector: string) {\r\n    return html.find(\r\n        `[data-tab=\"main\"] .recall-knowledge ${section === 'header' ? '.section-header' : '.section-body'} ${selector}`\r\n    )\r\n}\r\n\r\nfunction editLores(actor: NPCPF2e) {\r\n    new EditLores(actor).render(true)\r\n}\r\n\r\nfunction replaceLore(html: JQuery, lores: string, selector: string) {\r\n    const $lore = knowledgeSelector(html, 'body', selector)\r\n    const title = $lore.attr('title')\r\n    const classes = $lore.attr('class')\r\n    const suffix = $lore\r\n        .text()\r\n        .replace('\\n', '')\r\n        .trim()\r\n        .replace(/^.+? (\\d+.+)$/, '$1')\r\n    const replacement = lores\r\n        .split(',')\r\n        .filter(lore => lore.trim())\r\n        .map(lore => `<div class=\"${classes}\" title=\"${title}\">${capitalize(lore.trim())} ${suffix}</div>`)\r\n        .join('')\r\n    $lore.replaceWith(replacement)\r\n}\r\n\r\nfunction replaceLores(actor: NPCPF2e, html: JQuery) {\r\n    const unspecified = getFlag<string>(actor, 'unspecified')\r\n    const specific = getFlag<string>(actor, 'specific')\r\n    if (unspecified) replaceLore(html, unspecified, '.unspecified-lore')\r\n    if (specific) replaceLore(html, specific, '.specific-lore')\r\n}\r\n\r\nfunction addEvents(actor: NPCPF2e, html: JQuery) {\r\n    const $edit = knowledgeSelector(html, 'header', 'button.edit')\r\n    $edit.on('click', () => editLores(actor))\r\n}\r\n\r\nfunction addEditButton(html: JQuery) {\r\n    const $attempts = knowledgeSelector(html, 'header', 'button')\r\n    const edit = '<button type=\"button\" class=\"breakdown edit\">Edit</button>'\r\n    $attempts.before(edit)\r\n}\r\n","export function cleanSplit(str: string | undefined) {\r\n    if (!str) return []\r\n    return str\r\n        .split(',')\r\n        .map(x => x.trim())\r\n        .filter(x => x)\r\n}\r\n\r\nexport function capitalize(str?: string) {\r\n    if (!str) return ''\r\n    return str[0].toUpperCase() + str.slice(1)\r\n}\r\n","import { setModuleID } from '@utils/module'\r\nimport { renderNPCSheetPF2e } from './sheet'\r\n\r\nexport const MODULE_ID = 'pf2e-npc-knowledges'\r\nsetModuleID(MODULE_ID)\r\n\r\nHooks.once('ready', () => {\r\n    if (!game.user.isGM) return\r\n    Hooks.on('renderNPCSheetPF2e', renderNPCSheetPF2e)\r\n})\r\n"],"names":["templatePath","path","filter","x","join","getFlag","doc","key","fallback","setFlag","value","notify","str","arg1","arg2","arg3","type","data","undefined","permanent","ui","notifications","localize","args","game","i18n","format","subLocalize","subKey","fn","Object","defineProperties","warn","enumerable","configurable","info","error","has","hasLocalization","localizePath","template","hash","EditLores","FormApplication","constructor","actor","options","super","id","defaultOptions","mergeObject","title","width","getData","this","object","unspecified","specific","async","event","trim","activateListeners","html","find","on","bind","preventDefault","close","renderNPCSheetPF2e","sheet","$html","replaceLore","replaceLores","knowledgeSelector","before","render","editLores","addEvents","section","selector","lores","$lore","attr","classes","suffix","text","replace","replacement","split","lore","map","toUpperCase","slice","replaceWith","isSystem","setModuleID","Hooks","once","user","isGM"],"sourceRoot":""}